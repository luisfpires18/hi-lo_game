@page "/single"
@rendermode InteractiveWebAssembly
@inject NavigationManager NavigationManager

<PageTitle>Player vs Bot</PageTitle>

<h1>Hi-Lo Game - Single Player vs @this.Opponent?.Name</h1>

@if (this.Game!.GameStatus is GameStatus.WaitingToStart || this.Game.GameStatus is GameStatus.GameStarted)
{
    <h4>Guess the number between @MinNumber and @MaxNumber.</h4>
    <br />
    <label for="this.PlayerGuess">Enter your guess:</label>
    <input @bind="this.PlayerGuess" placeholder="Your Guess" />
    <button @onclick="GuessNumber">Submit Guess</button>
    <br />
    <br />

    this.IsInvalid = this.PlayerGuess < this.MinNumber || this.PlayerGuess > this.MaxNumber;

    @if (this.IsInvalid)
    {
        if (this.Game.GameStatus == GameStatus.GameStarted)
        {
            <h4>Invalid Input.</h4>
        }
    }
    else if (this.PlayerResult != null && this.PlayerAttempts > 0)
    {
        <h4><b>Player</b></h4>
        <h4>@this.PlayerResult</h4>
        <h5>Player Attemps made: @this.PlayerAttempts</h5>
        <hr />
        <h4><b>@this.Opponent?.Name</b></h4>
        <h4>@this.BotResult</h4>
        <h5>Bot Attemps made: @this.BotAttempts</h5>
    }
}
else if (this.Game.GameStatus == GameStatus.GameOver)
{
    if (this.BotVictory)
    {
        <h2>You lost! Bot guessed the mystery number @this.BotGuess in @this.BotAttempts attempts.</h2>
    }
    else
    {
        <h2>Congratulations! You've guessed the mystery number @this.PlayerGuess in @this.PlayerAttempts attempts.</h2>
    }

    <button @onclick="PlayAgain">Play Again</button>
}

@code {
    private int MinNumber = 1;
    private int MaxNumber = 100;
    private HiLoGame? Game;
    private Bot? Opponent;

    private int PlayerGuess = default(int);
    private string PlayerResult = string.Empty;
    private int PlayerAttempts;

    private int BotGuess = default(int);
    private string BotResult = string.Empty;
    private int BotAttempts = default(int);
    private int BotMinNumber = default(int);
    private int BotMaxNumber = default(int);

    private bool IsInvalid = false;
    private bool BotVictory = false;

    private Random Random = new Random();

    protected override void OnInitialized()
    {
        this.Game = new HiLoGame();
        this.Opponent = new Bot();
        
        this.PlayerGuess = this.MinNumber;
        this.BotMinNumber = this.MinNumber;
        this.BotMaxNumber = this.MaxNumber;
        this.BotGuess = this.Random.Next(this.BotMinNumber, this.BotMaxNumber + 1);
    }

    private void GuessNumber()
    {
        if (this.IsInvalid || this.Game is null)
        {
            return;
        }

        if (this.Game.GameStatus == GameStatus.WaitingToStart)
        {
            this.Game.StartGame(this.MinNumber, this.MaxNumber);
        }

        this.PlayerResult = this.Game.CheckGuess(this.PlayerGuess);
        this.PlayerAttempts++;

        if (this.PlayerResult == GameConstants.CORRECT)
        {
            this.Game.GameStatus = GameStatus.GameOver;
        }
        else
        {
            BotTurn();
        }
    }

    private void BotTurn()
    {
        this.BotResult = this.Game!.CheckGuess(this.BotGuess);
        this.BotAttempts++;

        if (this.BotResult == GameConstants.CORRECT)
        {
            this.Game.GameStatus = GameStatus.GameOver;
            this.BotVictory = true;
        }
        else if (this.BotResult.StartsWith("HI"))
        {
            this.BotMinNumber = this.BotGuess + 1;
            this.BotGuess = this.Random.Next(this.BotMinNumber, this.BotMaxNumber + 1);
        }
        else if (this.BotResult.StartsWith("LO"))
        {
            this.BotMaxNumber = this.BotGuess - 1;
            this.BotGuess = this.Random.Next(this.BotMinNumber, this.BotMaxNumber + 1);
        }
    }

    private void PlayAgain()
    {
        this.NavigationManager.NavigateTo("/single", forceLoad: true);
    }
}